MariaDB 다운로드
1. mariadb-xxx.msi 다운
https://downloads.mariadb.org/ >>> 10.4.13 >>> mariadb-1.04.13 win64.msi	>> 집 마리아db 포트 3307
2. 비밀번호 설정
user 'root' 
pw: 1234

Enable access 체크
Use UTF8 체크
3. 
도구 > 환경설정 > 단축키 > SQL > 선택 실행 (F5) 로 바꾸기
---------------------------------------------------------------------------------------------------
데이터베이스(DataBase)
- 저장소, 데이터를 통합하여 관리하는 집합체를 의미합니다.

데이터 베이스를 사용하는 이유
- 중복된 데이터를 없애고, 자료를 구조화시키고, 효율적인 처리를 할 수 있도록 관리합니다.
- 다양한 프로그램을 사용하는 사용자들과 데이터를 공유할 수 있습니다.

SQL(Structured Query Language)
데이터 베이스에서 데이터를 정의, 조작, 제어하기 위해 사용하는 언어입니다.
- 대소문자를 구별하지 않습니다.
- 문자열을 저장할 때 ' '(싱글 따옴표)만 사용합니다.	>> 다른 언어에서 " "(쌍 따옴표)로 감싸야하기 때문

ex) $sql = "select * from book where userid ='apple' ";

데이터베이스 생성
1. create database 데이터베이스 이름;
2. use 데이터베이스 이름;

데이터베이스 확인
show databases;

데이터베이스 삭제
drop database 데이터베이스 이름;

데이터베이스 선택
use  데이터베이스이름;
-------------------------------------------------------------------------------------------------------------------------------------------------
TABLE(테이블)
- 테이블은 데이터를 행과 열로 스키마(테이블의 규격/규칙)에 따라 저장할 수 있는 구조를 말합니다.
- 열 : 필드 or 컬럼 or 어트리뷰트(속성)
- 행 : 로우 or 레코드 or 튜플

* 스키마
데이터 베이스의 구조와 제약 조건에 관한 명세를 기술한 집합을 의미합니다.

테이블 만들기
create table 테이블이름 (
	필드명  필드타입 제약조건,
	필드명  필드타입 제약조건,
	필드명  필드타입 제약조건,
	....
	필드명  필드타입 제약조건
);

ex)
CREATE TABLE member (
	id INT NOT NULL Primary Key,
	username VARCHAR(20),
	dept VARCHAR(7),
	birth DATE,
	email VARCHAR(40)
);

@ 데이터 타입 *(= 기본형)
1.  숫자 타입 
- 정수 : tinyint, smallint, mediumint, *int , bigint ...
- 소수 : float, *double

2. 문자열 타입
- 텍스트 : char, *varchar, text 
- 바이너리 : binary, varbinary
- 열거 : enum
enum('남자', '여자')

3. 날짜와 시간타입
- 날짜 : date
- 날짜와 시간 : datetime, timestamp(1970년 1월1일 0시0분0초 ~ 2038년 1월19일 3시 14분07초)

@ 제약조건
- 데이터의 무결성을 지키기 위해 데이터를 입력받을 때 실행하는 검사 규칙입니다.
ex)
userid varchar(20) unique not null (비어 있으면 안돼고 중복되어서도 안됌)

1. NOT NULL : 해당 필드에 NULL값을 저장할 수 없습니다.
2. UNIQUE : 해당 필드는 서로 다른 값을 가져야 합니다. 중복된 값을 저장할 수 없습니다. 딘, NULL값은 저장할 수 있습니다.
3. DEFAULT : 해당 필드의 기본값을 설정합니다.
4. AUTO_INCREMENT :  해당 필드는 자동으로 숫자가 증가되어 추가됩니다. 따라서 직접 데이터를 추가할 수 없습니다.
5. PRIMARY KEY(기본키): 
- 해당 필드는 UNIQUE 제약과 NOT NULL 제약의 특징을 모두 가집니다.
- 해당 필드는 테이블에 오직 하나의 필드에만 설정할 수 있습니다.
- 데이터를 쉽고 빠르게 찾도록 도와주는 역할을 합니다. (index 기능이 자동 적용)
- 외래키가 참조할 수 있도록 만듭니다.
6. FOREIGN KEY(외래키);
- 다른 테이블과 연결해주는 역할을 합니다. 
- 기준이 되는 테이블의 내용을 참조해서 레코드가 입력됩니다.
- 다른 테이블에 의존하는 필드가 됩니다.
- 기본키를 참조합니다.

테이블 삭제
drop table 테이블 이름
예)
drop table tb_member

테이블 구조 확인 
desc tb_member;
----------------------------------------------------------------------------------------------------------------------------------------------------
필드 추가
alter table 테이블 이름 add 필드이름, 필드타입, 제약조건
예)
alter table tb_member add mem_point int default 0;

필드 수정
alter table 테이블이름 modify column 필드이름. 필드타입, 제약조건
예)
alter table tb_member modify column mem_address3  varchar(100)

필드 삭제
alter table 테이블이름 drop 필드이름
예)
alter table tb_member drop mem_point;
-----------------------------------------------------------------------------------------------------------------------------------------------------
데이터 삽입(INSERT)
1. insert into 테이블명 values('값1','값2','값3','값4', ... );	//값이 테이블의 필드 순서대로 들어간다.  (auto_increment 가 있기 때문에 현재 방식으로는 사용하지 못한다.)
2. insert into 테이블명 (필드명, 필드명, 필드명, ..) values ('값1','값2','값3','값4', ...);	// auto_increment 가 들어간 mem_idx 필드를 제외한 나머지 필드에 값을 지정하는 방식으로 사용한다.

ex)
insert into tb_member(mem_userid, mem_pass, mem_name, mem_email, mem_ssn,  mem_birthday,  mem_gender, mem_hobby, mem_hp, mem_zipcode, mem_address1, mem_address2, mem_address3) values ('apple', password('1111'),'김사과','apple@apple.com','0010111068512','19001011','남자','드라이브,쇼핑','010-1111-1111','12345','서울특별시 강남구','111-11','103호')

데이터 수정(UPDATE)

1.UPDATE 테이블명 SET 변경할 필드1 = 값1, 변경할 필드2 = 값2 ... [WHERE 조건절]	// WHERE 절을 쓰지 않으면 데이터가 전부 바뀔 수 있다.

예)
UPDATE tb_member SET mem_gender='여자' WHERE mem_idx ='1';

2. 한꺼번에 처리하기
UPDATE tb_member SET mem_point = mem_point + 1000;		// 멤버 전원에게 1000포인트를 제공

3. 조건식을 만족하는 데이터 수정하기
UPDATE tb_member SET mem_point = mem_point +500 WHERE  mem_point <= 2500 AND mem_point >= 1500;			[AND, OR 가 표준 문법이다.]

데이터 삭제(DELETE)
DELETE FROM 테이블명 [WHERE 조건절]
DELETE FROM tb_member where mem_idx=6

------------------------------------------------------------------------------------------------------------------------------------------------------------
연산자

산술 연산자
+, -, *, /, DIV(왼쪽 연산자를 오른쪽 연산자로 나눈 후, 소수부분을 버림), %또는 MOD

대입 연산자
=, := (왼쪽 연산자에 오른쪽 연산자를 대입)

비교 연산자
= (같다), 
<> 또는, !=, 
<, >, 
<=, >=, 
<=> (양쪽의 연산자가 모두 null일 때, 참을 반환하는 연산자), 
is(왼쪽 연산자와 오른쪽 연산자가 같으면 참을 반환),
is not(왼쪽 연산자와 오른쪽 연산자가 다르면 참을 반환),
is null(연산자의 값이 null이면 참을 반환),
between A and B (값이 A보다는 크거나 같고, B보다 작거나 같으면 참을 반환),
in()(연산자의 값이 인수로 전달받은 리스트에 존재하면 참을 반환)

논리 연산자
AND 또는 &&, OR 또는 ||, XOR, NOT 또는 !




