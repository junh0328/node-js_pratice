-------------------------------------------헷갈리는 영단어----------------------------------------------------------------
duplicated : 중복된
parse : 분석하다.
deprecated : 더이상 추천하지 않는
authenticate : 진짜임을 증명하다
serialize : 직렬화하다.
deserialize : 병렬화(?)하다
-------------------------------------------헷갈리는 오류정리집-----------------------------------------------------------
1. Cannot read property 'replace' of undefined
>>ejs 파일 경로를 적어놓고, 그 경로에 파일을 넣지 않았을 경우에 발생한다!

2. writeHead 수송신 오류
/*
    writeHead('xxx', '')
    1XX : 사용자 처리에 따른 에러
    2XX : 정상적인 페이지 호출
    3XX : 리다이렉션 (다른페이지로 이동)
    4XX : 페이지 에러
    5XX : 서버 에러

*/

-------------------------------------------node 핵심 정리----------------------------------------------------------------
node.js는 크롬 V8 자바스크립트 엔진으로 빌드된 자바스크립트 런타임입니다. *런타임 : 프로그램이 구동되는 환경
node.js는 이벤트 기반, 논블로킹 I/O 모델을 사용해 가볍고 효율적입니다.
node.js의 패키지 생태계인 npm(node package manager)은 세계에서 가장 큰 오픈 소스 라이브러리 생태계이기도 합니다.

1.1.1 서버
 노드를 통해 다양한 자바스크립트 애플리케이션을 실행할 수 있지만, 노드는 서버 애플리케이션을 실행하는 데 제일 많이 사용합니다.
서버는 네트워크를 통해 클라이언트에 정보나 서비스를 제공하는 컴퓨터 또는 프로그램을 말합니다.
클라이언트의 요청 (Input)에 대해 서버는 응답(output)을 하는 과정을 거칩니다.
서버는 다른 서버에게 클라이언트가 되어 또 다른 서버에게 요청을 보낼 수 있습니다.

1.1.2 자바스크립트 런타임
 *런타임은 특정 언어로 만든 프로그램을 실행할 수 있는 환경을 의미합니다. 
>> 자바스크립트를 브라우저 환경이 아닌 컴퓨터(터미널)에서 실행 가능하다는 것을 자바스크립트 런타임이라고 합니다.
노드는 구글의 V8엔진 뿐만 아니라 libuv라는 라이브러리를 사용합니다. V8과 libuv는 C와 C++로 구현되어 있습니다.
libuv 라이브러리는 노드의 특성인 이벤트 기반, 논블로킹 I/O 모델을 사용해 가볍고 효율적이게 사용할 수 있습니다.

1.1.3 이벤트 기반
이벤트 기반이란 이벤트가 발생할 때 미리 지정해둔 작업을 수행하는 방식을 의미합니다.
이벤트로는 클릭이나 네트워크 요청 등이 있을 수 있습니다. (클라이언트의 요청에 대해 반응한다는 뜻)
이벤트 기반 시스템에서는 특정 이벤트가 발생할 때 무엇을 할지 미리 등록해두어야 합니다.
이것을 이벤트 리스너에 콜백 함수(callback)를 등록한다고 표현합니다.

1.1.4 논블로킹 I/O (=비동기)

이벤트 루프를 잘 활용하면 오래 걸리는 작업을 효율적으로 처리할 수 있습니다. 
오래 걸리는 함수를 백그라운드로 보내서 다음 코드가 먼저 실행되게 하고, 그 함수가 다시 태스트 큐를 거쳐 
호출 스택으로 올라오기를 기다리는 방식입니다.
이 방식을 논블로킹이라고 하는데, 논 블로킹이란 이전 작업이 완료될 때까지 멈추지 않고 다음 작업을 수행함을 뜻합니다.
한 가지의 스레드를 사용하지만 멀티 프로세싱을 통한 작업을 분배합니다.

동기 방식을 사용하면 콜백 함수를 넣는 대신 직접 return 값을 받아옵니다.
그 값을 다음 줄부터 바로 쓸 수 있습니다.
-----------동기--------------------
console.log('시작');
let data = fs.readFileSync('./readme2.txt');
console.log('1번', data,toString());

-----------비동기------------------
console.log('시작');
fs.readFile('./readme2.txt', (err, data)=>{
	if(err){
		console.log(err);
	}else{
		console.log('1번', data.toString());
	}
});

1.1.5 (노드는)싱글 스레드(이기 때문에 논블로킹이 중요하다.)
노드는 싱글 스레드이므로 주어진 작업을 혼자서 처리해야 합니다.
반대로 멀티 스레드인 시스템에서는 여러 개의 스레드가 일을 나눠서 처리할 수 있습니다.

-프로세스는 운영체제에서 할당하는 작업의 단위입니다. 프로세스 간에는 메모리 등의 자원을 공유하지 않습니다.
-스레드는 프로세스 내에서 실행되는 흐름의 단위입니다. 스레드들은 부모 프로세스의 자원을 공유합니다.

노드는 스레드를 늘리는 대신, 프로세스 자체를 복사해 여러 작업을 동시에 처리하는 멀티 프로세싱 방법을 택했습니다.
싱글 스레드 방식의 프로그래밍은 멀티 스레드 방식보다 상대적으로 쉽습니다.

2.1.1 const, let
var은 함수 스코프를 가지므로 if문의 블록과 관계없이 접근할 수 있습니다.
const와 let은 블록 스코프를 가지므로 블록 밖에서는 변수에 접근할 수 없습니다.
블록의 범위는 if, while, for, function 등의 중괄호입니다.
함수 스코프 대신 블록 스코프를 사용함으로써 호이스팅 같은 문제도 해결되고 코드 관리도 수월해졋습니다.

const는 한 번 대입하면 다른 값을 대입할 수 없습니다. 또한 초기화 시 값을 대입하지 않으면 에러가 발생합니다.
따라서 기본적으로 변수 선언 시에는 const를 사용하고, 다른 값을 대입해야 하는 상황이 생겼을 때 let을 사요하면 됩니다.

2.1.7 async/await
노드 7.6 버전부터 지원되는 기능입니다. 자바스크립트 스펙은 ES2017입니다.
2.2.1 AJAX(Asychronous JavaScript And XML)
AJAX는 비동기적 웹 서비스를 개발하기 위한 기법입니다. 
이름에 XML이 들어가 있지만 꼭 XML을 사용해야 하는 것은 아닙니다.
요즘에는 JSON을 많이 사용합니다. 쉽게 말해 페이지 이동 없이 서버에 요청을 보내고 응답을 받는 기술입니다.
AJAX 요청은 보통 jQuery나 axios 같은 라이브러리를 이용해서 보냅니다.

3.1 REPL 사용하기
자바스크립트는 스크립트 언어이므로 미리 컴파일을 하지 않아도 즉석에서 코드를 실행할 수 있습니다.
입력한 코드를 읽고(read), 해석하고(eval), 결과를 변환하고(print), 종료할 때까지 반복(loop)한다고 해서 REPL이라고 부릅니다.

3.5.4 querystring
WHATWG방식의 url 대신 기존 노드의 url을 사용할 때 search 부분을 사용하기 쉽게 객체로 만드는 모듈입니다.
querystring.parse(쿼리): url의 query부분을 자바스크립트 객체로 분해해줍니다.
querystring.stringfy(쿼리): 분해된 query객체를 문자열로 다시 조립해줍니다.

const url = require('url');
const querystring = require('querystring')

const parsedUrl = url.parse('http://www.github.co.kr/?page=3&limit=10&category=nodejs&category=javascript');
const query = querystring.parse(parsedUrl.query);
console.log('querystring.parse(): ', query);
console.log('querystring.stringfy():', querystring.stringfy(query));

>>
querystring.parse() : { page : '3', limit : '10', category : ['nodejs', 'javascript'] }
querystring.stringfy() :  page=3&limit=10&category=nodejs&category=javascript

* req.query.변수 <-> req.params.변수의 차이
path 방식으로 sementic url을 사용하여 받는다면 params를 사용해야 하고, ex)localhost:3000/topic/0 <-> topics[req.params.id]
queryString으로 접근하기 위해서는 query를 사용해야 한다.		ex)localhost:3000/topic?id=0 <-> topics[req.query.id]

3.6.2 버퍼와 스트림 이해하기
 파일을 읽거나 쓰는 방식에는 크게 두 가지 방식, 즉 버퍼를 이용하는 방식과 스트림을 이용하는 방식이 있습니다.
버퍼링은 영상을 재생할 수 있을 때까지 데이터를 모으는 동작이고, 스트리밍은 방송인의 컴퓨터에서 시청자의 컴퓨터로 영상 데이터를 조금씩 전송하는 동작입니다.
스트리밍하는 과정에서 버퍼링을 할 수도 있습니다. 전송이 너무 느리면 화면을 내보내기까지 최소한의 데이터를 모아야 하고, 영상 데이터가 재생 속도 보다 빨리
전송되어도 미리 전송받은 데이터를 저장할 공간이 필요하기 때문입니다.

 앞에서 readFile 메서드를 사용할 때 읽었던 파일이 버퍼 형식으로 출력되었습니다. 
노드는 파일을 읽을 때 메모리에 파일 크기만큼 공간을 마련해두며, 파일 데이터를 메모리에 저장한 뒤 사용자가 조작할 수 있도록 해줍니다.
메모리에 저장된 데이터가 바로 버퍼입니다.

 *********추가 내용은 수업 후에 3.6.2********************

4.3 REST API와 라우팅
서버에게 하는 요청이 항상 html을 요구할 필요는 없습니다. 
이전 절에서도 /login 이라는 주소를 통해서 html을 요청하는 대신 세션 저장이라는 동작을 취하길 요청했습니다.
REST API는 REpresentational State Transfer의 약어입니다.
네트워크 구조의 한 형식으로, 서버의 자원을 정의하고, 자원에 대한 주소를 지정하는 방법을 가리킵니다.
주소는 의미를 명확히 전달하기 위해 명사로 구성됩니다. /user 이면 사용자 정보에 관련된 자원을 요청하는 것이고,
/post라면 게시글에 관련된 자원을 요청하는 것이라고 추측할 수 있습니다.

REST API는 주소 외에도 HTTP 요청 메서드라는 것을 사용합니다.
폼 데이터를 전송할 때 GET 또는 POST 메서드가 바로 요청 메서드입니다.
거기에 PUT, PATCH, DELETE까지 총 다섯 개가 메서드로 많이 사용됩니다.

- GET : 서버 자원을 가져오고자 할 때 사용합니다. 
요청의 본문(body)에 데이터를 넣지 않습니다. 
데이터를 서버로 보내야 한다면 쿼리스트링을 사용합니다.

- POST : 서버에 자원을 새로 등록하고자 할 때 사용합니다.
요청의 본문에 새로 등록할 데이터를 넣어 보냅니다.

- PUT : 서버의 자원을 요청에 들어 있는 자원으로 치환하고자 할 때 사용합니다.
요청의 본문에 치환할 데이터를 넣어 보냅니다.

- PATCH : 서버 자원의 일부만 수정하고자 할 때 사용합니다. 
요청의 본문에 일부 서장할 데이터를 넣어 보냅니다.

- DELETE : 서버의 자원 삭제하고자 할 때 사용합니다.

5.1 npm 알아보기 (Node계의 앱스토어)
JavaScript가 기본적으로 제공하는 모듈 외에, npm에는 60만개에 달하는 패키지가 등록되어 있습니다.
npm에 업로드된 노드 모듈을 패키지라고 부릅니다.
모듈이 다른 모듈을 사용할 수 있는 것처럼, 패키지가 다른 패키지를 사용할 수도 있습니다.
이런 관계를 의존관계라고 부릅니다.

6.3.3 body-parser
body-parser는 요청의 본문을 해석해주는 미들웨어입니다.
보통 폼 데이터나 AJAX 요청의 데이터를 처리합니다.

const bodyParser = require('body-parser');

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));

JSON은 JSON 형식의 데이터 전달 방식이고, URL-encoded는 주소 형식으로 데이터를 보내는 방식입니다.
보통 폼 전송이 URL-encoded 방식을 주로 사용합니다. 
urlencoded 메서드를 보면 { extended : false } 라는 옵션이 있습니다. 
이 옵션이 false면 노드의 queryString 모듈을 사용하여 쿼리스트링을 해석하고,
true면 qs 모듈을 사용하여 쿼리스트링을 해석합니다.
qs모듈은 내장 모듈이 아니라 npm 패키지이며, querystring 모듈의 기능을 조금 더 확장한 모듈입니다.


6.3.5 static
static 미들웨어는 정적인 파일들을 제공합니다.

app.use(express.static(path.join(__dirname, 'public')));

함수의 인자로 정적 파일들이 담겨 있는 폴더를 지정하면 됩니다.
현재 public 폴더가 지정되어 있습니다.

public/stylesheets/style.css >>>> http://localhost:3000/stylesheets/style.css로 접근할 수 있습니다. 

(public이 생략된체 root폴더로 따로 경로를 지정하지 않아도 된다)
실제 서버의 폴더 경로에는 public이 들어 있지만, 요청 주소에는 public이 들어 있지 않다는 점을 주목해주세요.
서버의 폴더 경로와 요청 경로가 다르므로 외부인이 서버의 구조를 쉽게 파악할 수 없습니다.
이는 보안에 큰 도움이 됩니다.

6.5.1.2 변수
res.render(템플릿, 변수 객체)는 익스프레스가 res 객체에 추가한 템플릿 렌더링을 위한 메서드입니다.
index.pug를 HTML로 렌더링하면서 {title : 'Express'}라는 객체를 변수로 집어 넣습니다.
layout.pug와 index.pug의 title 부분이 모두 Express로 치환됩니다.
즉, HTML에도 변수를 사용할 수 있게 된 셈입니다.

res,render 메서드에 두 번째 인자로 변수 객체를 넣는 대신, app.js의 에러 처리 미들웨어처럼 res.locals 객체를 사용해서 변수를 넣을 수도 있습니다.

router.get('/', (req, res, next) =>{
	res.locals.title = 'Express';
	res.render('index');
});

7.1 데이터베이스란?
 데이터베이스는 관련성을 가지며 중복이 없는 데이터들의 집합입니다. 이러한 데이터베이스를 관리하는 시스템을 DBMS라고 부릅니다.
또한, 서버에 데이터베이스를 올리면 여러 사람이 동시에 사용할 수 있습니다. 사람들에게 각각 다른 권한을 주어 어떤 사람은 읽기만 가능하고,
어떤 사람은 모든 작업을 가능하게 할 수 있습니다. 

7.4.2 테이블 생성하기
create table 테이블명 (
컬럼(속성이름) 자료형 

id INT NOTNULL AUTO_INCREMENT,
name VARCHAR(20) NOT NULL,
age INT UNSIGNED NOT NULL,
comment TEXT NULL,
...
)
자료형
1. INT
2, VARCHAR
3. TEXT
4. TINYINT
5, DATETIME
..
옵션
1. NOT NULL : 빈칸을 허용할지 여부를 묻는 옵션
2. NULL
3. UNSIGNED : 숫자 자료형에 적용되는 옵션, 음수를 무시하고 0 ~ 2147483647까지의 숫자를 저장
4. AUTO_INCREMENT : 자동으로 1씩 증가, PK에 주로 사용
5. DEFAULT : 데이터베이스 저장 시 해당 컬럼에 값이 없을 시 MySQL이 기본값을 대신 넣어줍니다. 
*now( ) 는 현재 시각을 넣으라는 뜻입니다.
*current-timestamp를 적어도 같은 뜻이 됩니다.

8.1 NoSQL vs SQL
- 자유로운 데이터 입력
- 컬렉션 간 JOIN미지원
- 트랜잭션 미지원 
(*트랜잭션: 여러 쿼리가 모두 정상적으로 수행되거나 아예 하나도 수행되지 않음을 보장하는 기능)
- 확장성, 가용성

애플리케이션을 만들 때 꼭 한가지 데이터베이스만 사용해야 하는 것은 아닙니다.
많은 기업이 SQL과 NoSQL을 동시에 사용하고 있습니다.
SQL과 NoSQL은 각각 특징이 다르므로 알맞은 곳에 사용하면 됩니다.
예를 들어 항공사 예약 시스템의 경우 비행기 표에 관한 정보가 모든 항공사에 일관성 있게 전달되어야 하므로
예약 처리 부분의 데이터베이스는 MySQL을 사용합니다.
대신 핵심 기능 외의 빅데이터, 메시징, 세션 관리 등에는 확장성과 가용성을 위해 몽고디비를 사용할 수도 있습니다.


-------------------------------------------node 기본 선언----------------------------------------------------------------
0. npm init 으로 pakage.json을 만든다.

0.1 npm install을 통해 필요한 모듈을 다운로드 받는다.

1.
const 변수명 = require('모듈 이름');

>> 
- 구성하는데 필요로 하는 모듈을 설치한다.
- express 기본 제공 모듈외에 설치가 필요한 모듈은 npm xxxx install 등으로 설치!

2.1 [모듈을 변수 선언 후(=1번 과정을 거친 후)]
const 변수명 = new 모듈이름.메소드( );
ex) let eventEmitter = new events.EventEmitter();

2.2)
const 변수명 = 모듈이름( );
const app = express();

- 모듈과 관련된 메소드를 사용할 수 있도록 객체로 생성자를 만듭니다!
- 원 모듈의 메소드와 기능 등을 사용할 수 있습니다.

-------------------------------------------------모듈 정리------------------------------------------------------------------
●●●●●●●●1. FileSystem, (fs) 모듈●●●●●●●●
- 파일 처리와 관련된 모듈입니다.

메소드
- readFile( ) : 파일을 비동기적으로 읽습니다.
- readFileSync( ) : 파일을 동기적으로 읽습니다.
- writeFiel( ) : 파일을 비동기적으로 씁니다.
- wirteFileSync( ) : 파을을 동기적으로 씁니다.

* 동기와 비동기
프로그램이 동작하는 상태에서 완전히 해당 내용을 끝내고 다음으로 제어를 넘기는 방식을 동기, (순차적으로 현재 프로세스를 다 끝내야 다음 프로세스를 실행)
동작이 끝나지 않은 상태에서도 제어권을 넘긴 후 프로그램을 계속 진행하면 비동기식이라고 합니다. (비순차적으로 현재 프로세스를 다 끝내지 않아도 다음 프로세스를 실행)

- 비동기는 예외처리를 할 필요가 없습니다. >> function 함수에 err 객체를 가지고 있기 때문에

----------동기-----------------
fs.readFile("test1.txt", "utf-8", function(err,data){          

    if(err){
        console.log(err);
    }else{
        console.log(data);
    }
});

-----------비동기--------------- try, catch문을 사용하여 오류를 표시해준다.
try{
    fs.writeFileSync('test4.txt','writeFileSync()!','utf-8');
    console.log('success!!');
}catch(e){
    console.log(e);
}

●●●●●●●●2. events 모듈●●●●●●●●●●
- 이벤트 위주의 프로그램을 작성할 때 사용하는 모듈입니다.

메소드
- eventEmitter.on( ) : 지정한 이벤트의 리스너를 추가합니다.
- eventEmitter.once( ) : 지정한 이벤트의 리스너를 추가하지만 한 번 실행 이후 자동 제거됩니다.
- eventEmitter.removelistener( ) : 지정한 이벤트에 대한 리스너를 제거합니다.
- eventEmitter.emit( ) : 지정한 이벤트 발생

시스템 이벤트
process
process 객체는 노드에서 항상 사용할 수 있는 객체입니다.
on( ) 과 emit( ) 메소드는 객체를 생성하거나, 모듈을 가져오지 않아도 바로 사용할 수 있습니다. 
on( ) 메소드를 호출하면서 이벤트 이름을 exit로 지정하면 내부적으로 프로세스가 끝날 때를 알 수 있습니다.

●●●●●●●●●●3. http 모듈●●●●●●●●●●
Node.js에서 가장 기본적이고 중요한 서버 모듈입니다. HTTP 웹 서버를 생성하는 것과 관련된 모든 기능을 담당합니다.

- http.createServer( ) 메소드를 사용하여 서버를 열고 닫을 수 있습니다.
- 매개변수로는 req, res, ... 등이 있습니다.
- req >> request 사용자(클라이언트)에게 요청을 받는 객체입니다.
- res >> response 서버가 사용자에게 응답해주는 객체입니다.

3.1) server 객체
http 모듈의 createServer( ) 메소드를 사용하여 server 객체를 생성합니다.

메소드 server.xxx();
- listen( ) : 서버를 실행하고 클라이언트를 기다립니다.
- close( ) : 서버를 종료합니다.

이벤트
- request : 클라이언트가 서버에 요청할 때 발생하는 이벤트입니다.
- connection : 클라이언트가 접속할 때 발생하는 이벤트입니다.
- close : 서버가 종료될 때 발생하는 이벤트입니다.

3.2) request 객체
클라이언트가 서버에게 전달하는 메시지(정보)를 담는 객체입니다.

속성
method : 클라이언트 요청 방식을 나타냅니다. (GET, POST)
url : 클라이언트가 요청한 URL을 나타냅니다.
headers : 요청 메시지 헤더를 나타냅니다.

3.3)res, response 객체
서버에서 클라이언트로 응답 메세지를 전송시켜주는 객체입니다.

메소드
writeHead( ) : 응답 헤더를 작성합니다.
write( ) : 응답 본문,document 부분에 보여질 부분을 작성합니다.
end( ) : 응답 본문을 작성하고 응답을 종료합니다.

res.writeHead(200, { 'content-type': 'text/html' });
                                               ------------
                                               MIME 형식

MIME 형식
text/plain : 일반적인 text 파일
text/html : html 형식 파일
text/css : css 형식 파일
text/xml : xml 형식 파일
image/jpeg : jpeg 이미지 파일
image/png : png 이미지
image/mpeg : mpeg 동영상 형식
audio/mp3 : mp3 음악 형식
. . . .

●●●●●●●●●●4. express 모듈●●●●●●●●●●
- http 모듈만 사용해서 웹 서버를 구성하면 직접 많은 기능을 개방해야 합니다.
- 이 문제를 해결하기 위해 만들어진 모듈이 익스프레스입니다. 
- 익스프레스 모듈을 사용하면 간단한 코드로 웹 서버의 기능을 구현할 수 있고, *미들웨어와 *라우터를 사용하여 편리하게 웹 서버를 구성할 수 있습니다.

* 미들웨어 : 
- 요청과 응답의 중간에 위치하여 미들웨어라고 부릅니다. 
- 라우터와 핸들러 또한 미들웨어의 일종이므로 미들웨어가 익스프레스의 전부라고 해도 과언이 아닙니다. 
- 미들웨어는 요청과 응답을 조작하여 기능을 추가하기도 하고, 나쁜 요청을 걸러내기도 합니다.
- 미들웨어는 주로 app.use와 함께 사용됩니다.
- app.use 메서드의 인자로 들어 있는 함수가 미들웨어입니다.
- 미들웨어는 use 메서드로 app에 장착합니다.
- 미들웨어들을 순차적으로 거친 후 라우터에서 클라이언트로 응답을 보냅니다.
- 미들웨어 안에서는 반드시 next( )로 호출해야 다음 미들웨어로 넘어갑니다.

* 라우터 : 도메인을 사용자들에게 줄 수 있도록 만든 카테고리
ex)	(/blog, /chat 과 같이 분류를 해줌)
 http:www.naver.com/blog
 http:www.naver.com/chat

메소드 app.xxx ( app은 express의 기능을 쓸 수 있는 생성자이다.)
use( ) : 미들웨어 함수를 사용합니다.
get( ) : get으로 사용자 정보를 전달 받습니다.
set( ) : 서버 설정을 위한 속성을 지정합니다.
redirect( ) : 웹 페이지의 경로를 강제로 이동시킵니다.
send( ) : 클라이언트에 응답 데이터를 보냅니다. 전달할 수 있는 데이터는 HTML 문자열, buffer 객체, JSON객체, JSON 배열 ... 등 입니다.
header( ) : 헤더를 확인합니다.

example- 1))

app.get('/', (req, res) => {			// '/' 으로 설정할 경우 우리가 처음 설정한 웹 페이지의 루트 (index.js)가 되는 페이지 초기 창입니다.
    res.send('익스프레스 서버 시작');		// 초기 창에 접근 성공 할 시에 document 부분에 '익스프레스 서버 시작' 이라는 문자열 데이터를 보냅니다.
}); 
app.listen(port, () =>{			// 우리가 설정한 port 번호에 서버를 열고, 성공 시에 포트번호에서 응답을 대기한다는 콘솔을 띄웁니다.
    console.log("Server listening on port: " + port);
});     

익스프레스 요청 객체에 추가된 헤더와 파라미터
query : 클라이언트에서 GET 방식으로 전송한 요청 파라미터를 확인합니다.
body : 클라이언트에서 POST 방식으로 전송한 요청 파라미터를 확인합니다.
(단, body-parser와 같은 모듈을 사용해야 합니다.)
*body-parser : 요청의 번문을 해석해주는 미들웨어입니다. 보통 폼 데이터나 AJAX 요청의 데이터를 처리합니다.

ex) var paraName = req.query.userid 	>>> get 방식으로 전송한 파라미터 요청을 확인 + req 객체이므로, 클라이언트에게 받는 정보임
ex) var paramID = req.body.userid;	>>> post 방식으로 전송한 파라미터 요청을 확인

ex) res.write('<div><p>paraName : ' + paraName +'</p></div>');	>>> get 방식으로 받은 paraName을 res 객체로 뿌려줌
ex) res.write('<div><p>아이디 : ' + paramID +'</p></div>'); 	>>> post 방식으로 받은 paramID를 res 객체로 뿌려줌

●●●●●●●●●●5. router 미들웨이●●●●●●●●●●
- 사용자의 다양한 요청이 들어왔을 때 use() 메소드로 설정한 미들웨어가 항상 호출되는 불편한 점이 있기 때문에, 그 불편을 해결하고자 사용하는 미들웨어가 Router 미들웨어입니다.

Router 객체 만들기
var 라우터객체 이름 = express.Router( );		//라우터 객체는 express 안에 들어있는 기능임
라우터객체 이름.route(요청패스[=해당하는 페이지]).get(실행할 함수);
라우터객체 이름.route(요청패스[=해당하는 페이지]).post(실행할 함수);

ex) post 방식에서 router 객체 받아 쓰기
app.use(bodyParser.urlencoded({ extended: false}));  
var router = express.Router();

●●●●●●●●●●6. static 미들웨이●●●●●●●●●●
static 객체 만들기
const static = require('serve-static'); 		//serve-static 이미지가 그 위치에 있지 않더라도 경로를 지정해줄 수 있는 모듈

특정 폴더의 파일들을 특정 패스로 접근할 수 있도록 만들어줍니다. 예를 들어 public 폴더에 있는 모든 파일을
웹 서버의 루트 패스로 접근할 수 있도록 만들 수 있습니다. (serve_static 모듈 사용)

app.use(static(path.join(__dirname, 'public')));   1.퍼블릭 폴더를 기본 디렉토리로 바꿔줌으로써

-http://localhost:3000/public/login.html           2.호스트에서 접근해야하는 방법을 
-http://localhost:3000/login.html                    3.이와 같은 방식으로 public 을 기본으로 하여 접근할 수 있도록 바꿔주는 기능 (static) 

// localhost:3000/rain
app.get('/rain', (req,res) =>{			1. 기본주소/rain 이라는 값을 클라이언트에게 요청받으면
    res.send("hello rain, <img src='/rainy.png'>");	2. "hello rain"이라는 문자열과 이미지를 응답(전송)한다.
});						
s
●●●●●●●●●●7. multer 모듈●●●●●●●●●●
익스프레스에서 파일을 업로드하기 위한 미들웨어입니다.
const multer = require('multer');

1. 파일 업로드 폴더를 만듭니다.				>> ex) uploads
2. diskStroage 설정
- destination : 저장 폴더를 설정합니다.
- filename : 저장될 파일 이름을 설정합니다.
3. multer() : 생성자에 diskStorage 설정과 파일크기를 설정됩니다.

let storage = multer.diskStorage({
    destination: (req, file, callback) => {
        callback(null, 'uploads');					>> 비어있는 저장 폴더에 저장할거야!
    },
    filename: (req, file, callback) => {				>> ex) 파일이 apple.jpg 일 때!
        //.jpg
        let extension = path.extname(file.originalname);		>> 확장자만 떼어 extension에 저장한다.
        // apple
        let basename = path.basename(file.originalname, extension);	>> 확장자를 뗀 오리지날 이름만 가져와 basename에 저장한다.
        // apple_202000801xxx.jpg
        callback(null, basename + '_' + Date.now() + extension);	>> 파일이름(apple) + _ + 현재시간(20200802xxx) + 확장자명(.jpg) 으로 콜백하여 업로드 파일에 저장한다!
    }
});

let uploads = multer({
    storage: storage,
    limits: {
       
        files: 3,
      
        fileSize: 1024 * 1024 * 1024,
    }
});
●●●●●●●●●●8. morgan 모듈●●●●●●●●●●
 콘솔에 나오는 GET/ 200 51.267 ms - 1539 같은 로그는 모두 morgan 미들웨어에서 나오는 것입니다.
요청에 대한 정보를 콘솔에 기록해줍니다.

const logger = require('morgan');

app.use(loger('dev'));

●●●●●●●●●●9. mongoose 모듈●●●●●●●●●●

 몽고디비를 사용하면서 하나의 컬렉션 안에 똑같은 속성을 가진 문서 객체를 반복적으로 넣어 둔다면, 데이터를 조회할 때도 어던 속성들이
들어있는지 미리 알고 있는 상태에서 조회할 수 있습니다. 따라서 관계형 데이터베이스처럼 테이블, 엑셀 시트와 같이 쉽게 다룰 수 있는데, 
이를 제공하는 모듈이 몽구스입니다.

오브젝트 맵퍼(Object Mapper)
자바스크립트 객체와 데이터베이스 객체를 서로 매칭하여 바꿀 수 있게 합니다.

메소드 
connect( ) : mongoose를 사용하여 데이터베이스를 연결합니다.
model( ) : 모델을 정의합니다.
Schema( ) : 스키마를 정의하는 생성자입니다.

* Promise
프로미스는 자바스크립트 비동기 처리에 사용되는 객체입니다. 자바스크립트의 비동기 처리란 특정 코드의 실행이 완료될 때까지 기다리지 않고 다음 코드를 먼저 수행하는 자바스크립트 특성입니다. 프로미스는 주로 서버 및 DB에서 받아온 데이터를 화면에 표시할 때 사용합니다. (데이터를 받아오기 전에 마치 데이터를 다 받아온 것처럼 화면에 데이터를 표시하려면 오류가 발생 또는 빈 화면이 뜨게 되는데 이를 해결하기 위한 방법으로 쓰입니다.)

●●●●●●●●●●10. mysql 모듈●●●●●●●●●●

 MySQL을 데이터베이스 장치로 사용합니다.
커넥션 풀*을 사용하여 연결합니다.
커넥션 풀) 데이터베이스 연결 객체가 너무 많이 만들어지는 것을 막고, 한 번 만든 연결을 재사용할 수 있게 합니다.
데이터베이스에 객체를 많이 연결하면 메모리 리소스를 많이 차지하므로, 한 번  만든 연결 객체를 커넥션 풀에 넣어두고 다음번 요청이 있을 때 재사용합니다.
메모리에 객체를 미리 만들어 놓고 연결 객체를 통해 db를 연결할 수 있게 합니다.
---------------------------------------mysql 연결 설정----------------------------------------
- 설정옵션
connectionLimit : 커넥션 풀에서 만들 수 있는 최대 연결 개수를 설정합니다.
host : 연결할 호스트 이름을 설정합니다.
port : 데이터베이스가 사용하는 포트 번호를 설정합니다.
user : 데이터베이스 사용자 아이디를 설정합니다.
password : 데이터베이스 사용자 비밀번호를 설정합니다.
database : 데이터베이스 이름을 설정합니다.
debug : 데이터베이스 처리과정을 로그로 남길지 여부를 설정합니다.

ex)
let 커넥션풀객체 = mysql.createPool({
	설정옵션
	...
	...
})
●●●●●●●●●●11. 패스포트(Passport) 모듈●●●●●●●●●●

 노드에서 사용할 수 있는 사용자 인증 모듈입니다.
사용 방법이 간단할 뿐만 아니라 사용자 인증 기능을 독립된 모듈안에서 진행할 수 있도록 도와줍니다.
특히 익스프레스를 사용할 경우 미들웨어로 사용할 수 있어 간단한 설정만으로 로그인 기능을 만들 수 있습니다.

	클라이언트					서버
				인증요청	
	로컬 계정		---------------------------------->	           패스포트 모듈
	페이스북 		<---------------------------------	           (세션 관리)
	구글 			세션 저장
	네이버		
	카카오

passport 메소드
- serializeUser( ) : 사용자가 인증 성공시, 사용자 정보를 이용하여 세션을 만듭니다.
- deserializeUser( ) : 사용자가 페이지 접근시, 세션을 관리합니다.

로컬 계정 관리를 위한 LocalStrategy 객체
- LocalStrategy({
	usernameField: 아이디(계정) 필드,
	passwordField: 비밀번호 필드,
	passReqToCallback: Req객체를 사용할지 여부
}, (req객체, 아이디 필드, 비밀번호 필드, 콜백) =>{
	
};
●●●●●●●●●●11. errorhandler 모듈●●●●●●●●●●
 page load시 발생할 수 있는 에러를 관리하기 위한 모듈입니다.
- npm install express-error-handler로 다운받습니다.
- const expreeErrorHandler = require('express-error-handler') 로 선언 후에 사용합니다.

let errorHandler=expressErrorHandler({
    static:{
        '404':'./public/404.html'
    }
});
app.use(expressErrorHandler.httpError(404));
app.use(errorHandler);

404 오류에 해당할시 /public 폴더안에 있는 404.html로 보낸다는 기본 설정을 만듭니다.
static( ) : 모델 객체에서 사용할 수 있는 함수를 등록합니다. 함수의 이름과 함수 객체를 파라미터로 전달합니다.
●●●●●●●●●●12. connect-flash 모듈●●●●●●●●●●
 일회성 메시지들을 웹브라우저에 나타낼 때 사용하는 모듈입니다.
flash 미들웨어는 함수형 모듈로써 flash()처럼 사용하며
req 객체에 req.flash() 처럼 메서드를 추가시킵니다.

res.flash(키, 값)으로 해당 키에 값을 설정하고,
req.flash(키)로 해당 키에 대한 값을 불러옵니다.

에러 알림에 유용한 모듈로, 일회성 메시지이기 때문에 refresh하면 flash 메시지는 참조되지 않습니다.

●●●●●●●●●●13. bcrypt 모듈●●●●●●●●●●
bcrypt 모듈은 hash 메서드를 사용하여 손쉽게 비밀번호를 암호화할 수 있습니다.
bcrypt.hash(키, 값) 에서 값은 pbkdf2의 반복 횟수와 비슷한 기능을 합니다.
숫자가 커질수록 비밀번호를 알아내기 어려워지지만 암호화 시간도 오래 걸립니다.
12 이상을 추천하고 최대 31까지 사용할 수 있습니다.

const hash = await bcrypt.hash(password, 12);
---------------------------템플릿 엔진----------------------------------
1.
EJS(Embedded JavaScript)
- EJS 모듈은 템플릿 엔진 모듈입니다. 
- 템플릿 엔진 모듈은 특정한 파일로부터  HTML 페이지를 생성하는 모듈을 의미합니다.

EJS 파일 형식의 특수 태그
<% code %> : 자바스크립트 코드를 입력하는 영역을 의미합니다.
<%= 값 %> : 데이터를 출력합니다.
<%- 값 %> : 다른 ejs 데이터를 가져옵니다.

터미널에서 ejs 설치
// npm install ejs

EJS 데이터를 전달
render( ) : 메소드의 두 번째 매개 변수에 전달하고자 하는 데이터를 입력하여 전달합니다.

2.
PUG(jade)
PUG 문법 : http://jade-lang.com/

터미널에서 jade 설치
// npm install jade


------------------------------------------------------------------------------------
변수이름으로 객체로 만든 파일 불러오기

1.
let 선언할 변수명 = require('불러올 파일주소')
>> let config = require('./config/config') // 기본 확장자가 js이므로 실제 파일 이름은 config.js이지만, js를 붙일 필요가 없다.
(..): 부모 폴더 / (.) 내가있는 폴더
불러올 파일 주소에 있는 파일은 module.exports = {} 를 포함될 기능을 담는다.

---------------------config.js ---------------------
module.exports = {
    server_port : 3000,
    // db_url >>> database.js에서 불려져 사용되는 객체
    db_url : 'mongodb://localhost:27017/nodedb',
    db_schemas : [{file: './member_schema' , collection: 'member2', schemaName: 'MemberSchema', modelName : 'MemberModel'}],
    route_info: []
}

2.
let 선언할 변수명 = require('불러올 파일주소')
>> let database = require('./database/database');

작성한 파일의 맨 마지막에 module.exports = database; 를 통해 exports 할 것임을 알려준다.
--------------------database.js----------------------------------
const mongoose = require('mongoose');
let database = {};


database.init = function(app, config){
    console.log('database.init() 호출');
    connect(app, config);
};

function connect(app, config){
    console.log('connect() 호출');
    mongoose.Promise = global.Promise;
    mongoose.connect(config.db_url);
    database.db = mongoose.connection;
    database.db.on('error', console.error.bind(console, 'mongoose connection error.'));
    database.db.on('open', () => {
        console.log('데이터베이스 연결 성공! ');
        createSchema(app, config);
    });
    database.db.on('disconnected', connect);
}

function createSchema(app, config){    let schemaLen = config.db_schemas.length;
    console.log('설정에 정의된 스키마의 갯수 : %d', schemaLen);

    for(let i=0; i<schemaLen; i++){

        let curItem = config.db_schemas[i];
        let curSchema = require(curItem.file).createSchema(mongoose);
        console.log('%s 모듈을 불러들인 후 스키마를 정의함', curItem.file);

        let curModel = mongoose.model(curItem.collection, curSchema);
        console.log('%s 컬렉션을 위해 모델 정의함', curItem.collection);
        database[curItem.schemaName] = curSchema;
        database[curItem.modelName] = curModel;
        console.log('스키마 이름[%s], 모델이름[%s]이 데이터베이스 객체의 속성으로 추가되었습니다.', curItem.schemaName, curItem.modelName);
        app.set('database', database);
        console.log('database 객체가 app객체의 속성으로 추가됨');
    }
}

module.exports = database;
------------------------노드 내장 객체 알아보기---------------------------
●●●●●●●●1. global 객체●●●●●●●●
- 노드의 전역 객체
> 브라우저의 window 같은 역할
> 모든 파일에 접근 가능
> window처럼 생략도 가능 (console, require도 global의 속성)
ex) global.setTimeOut() , global.console.log() ....

●●●●●●●●2. console 객체●●●●●●●●
- 브라우저의  console 객체와 매우 유사
> console.time, console.timeEnd: 시간 로깅
> console.error : 에러 로깅
> console.log : 평범한 로그
> console.dir : 객체 로깅
> console.trace : 호출스택 로깅 (함수 안에서 쓰면 호출스택을 보여준다.)

●●●●●●●●3. 타이머 객체●●●●●●●●
- set <-> clear의 대응
> set 메서드의 리턴 값을 clear 메서드에 넣어 취소
*밀리초 1,000(밀리초) = 1(초)
> setTimeout(콜백함수, 밀리초) : 밀리초 이후에 콜백함수를 실행
> setInterval(콜백함수, 밀리초) : 주어진 밀리초마다 콜백 함수를 반복 실행
> setImmediate(콜백함수) : 콜백 함수를 즉시 실행

> clearTimeout(아이디) : setTimeout을 취소합니다.
> clearInterval(아이디) : setInterval을 취소합니다.
> clearImmediate(아이디) : setImmediate를 취소합니다.

---------------------------------------------------------------------------
실제 프로젝트시 설계 방향 (몽고 디비를 활용한 페이지 생성)

●config 폴더 > 전체적인 세팅할 것
- config.js : 서버포트, db연결
- passport.js : 사용자 인증, ./passport 폴더 하위의 local_login.js 또는 local_signup.js로 보내줌
○○passport 폴더 
- local_login.js : 로컬계정 로그인을 위한 페이지
- local_signup.js : 로켈계정 회원가입을 위한 페이지
●database 폴더 > 데이터베이스와 연동 및 스키마 구현
- database.js : 
- member_schema.js :
●public 폴더 > 일반 html 페이지
= 404.html : 
●routes 폴더 > action을 처리하는 폴더 (어떤 페이지로 이동)
- route_loader.js :
- route_user.js :
●views 폴더 > 화면 보여줄 것들 (회원가입, 회원가입 후 로그인 페이지, 프로필 페이지)
- index.ejs
- login.ejs
- profile.ejs
- signup.ejs